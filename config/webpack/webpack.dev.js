/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const plugins = [
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new webpack.NoErrorsPlugin(),
  new HtmlWebpackPlugin({
    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    filename: path.resolve(process.cwd(), 'public', 'index.html'),
    templateContent: templateContent(), // eslint-disable-line no-use-before-define
  })
];

module.exports = require('./webpack.base')({
  // Add hot reloading in development
  entry: [
    'webpack-hot-middleware/client',
    path.resolve(process.cwd(), 'app', 'entry.js'), // Start with js/app.js
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },

  environmentConfig: path.join(__dirname, '../environments/client/development.js'),

  // Add development plugins
  plugins: dependencyHandlers().concat(plugins), // eslint-disable-line no-use-before-define
  preLoaders: 'eslint-loader',

  // Tell babel that we want to hot-reload
  babelQuery: {
    presets: ['react-hmre', 'es2015'],
  },

  module: {
    preLoaders: [{
      test: /(\.js$)/,
      exclude: /node_modules/,
      loader: 'eslint-loader'
    }]
  },

  eslint: {
    configFile: '.eslintrc'
  },

  // Emit a source map for easier debugging
  devtool: 'cheap-module-eval-source-map',
});

/**
 * Select which plugins to use to optimize the bundle's handling of
 * third party dependencies.
 */
function dependencyHandlers() {
  // Don't do anything during the DLL Build step
  if (process.env.BUILDING_DLL) { return []; }

  // use the CommonsChunkPlugin
  return [
    new webpack.optimize.CommonsChunkPlugin({
      name: 'vendor',
      children: true,
      minChunks: 2,
      async: true,
    }),
  ];
}

/**
 * We dynamically generate the HTML content in development
 */
function templateContent() {
  const html = fs.readFileSync(
    path.resolve(process.cwd(), 'public/template.html')
  ).toString();
  return html;
}
